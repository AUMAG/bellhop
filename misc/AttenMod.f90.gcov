        -:    0:Source:AttenMod.f90
        -:    0:Graph:AttenMod.gcno
        -:    0:Data:AttenMod.gcda
        -:    0:Runs:2
        -:    1:!! Attenuation module for converting sound speed and attenuation to complex values
        -:    2:!! Provides routines to convert sound speed and attenuation in user units to complex sound speed
        -:    3:MODULE AttenMod
        -:    4:  !! Acoustic attenuation calculations including volume attenuation formulas and unit conversions
        -:    5:
        -:    6:  ! Attenuation module
        -:    7:  ! Routines to convert a sound speed and attenuation in user units to a complex sound speed
        -:    8:  ! Includes a formula for volume attenuation
        -:    9:
        -:   10:  USE FatalError
        -:   11:  IMPLICIT NONE
        -:   12:  INTEGER, PRIVATE, PARAMETER      :: PRTFile = 6
        -:   13:  INTEGER, PARAMETER               :: MaxBioLayers = 200
        -:   14:  INTEGER                          :: iBio, NBioLayers
        -:   15:  REAL    (KIND=8) :: T = 20, Salinity = 35, pH = 8, z_bar = 0, FG   ! Francois-Garrison volume attenuation; temperature, salinity, ...
        -:   16:
        -:   17:  TYPE bioStructure
        -:   18:     REAL (KIND=8) :: Z1, Z2, f0, Q, a0
        -:   19:  END TYPE bioStructure
        -:   20:
        -:   21:  TYPE( bioStructure ) :: bio( MaxBioLayers )
        -:   22:
        -:   23:CONTAINS
        -:   24:!! Converts real wave speed and attenuation to complex wave speed
function __attenmod_MOD_crci called 58 returned 100% blocks executed 21%
       58:   25:  FUNCTION CRCI( z, c, alpha, freq, freq0, AttenUnit, beta, fT )
        -:   26:
        -:   27:    ! Converts real wave speed and attenuation to a single
        -:   28:    !  complex wave speed (with positive imaginary part)
        -:   29:
        -:   30:    ! AttenUnit
        -:   31:    ! 6 Cases:    N Nepers/meter
        -:   32:    !             M dB/meter      (M for Meters)
        -:   33:    !             m dB/meter with a power law
        -:   34:    !             F dB/m-kHz      (F for frequency dependent)
        -:   35:    !             W dB/wavelength (W for Wavelength)
        -:   36:    !             Q Q
        -:   37:    !             L Loss parameter
        -:   38:    !
        -:   39:    ! second letter adds volume attenuation according to standard laws:
        -:   40:    !             T for Thorp
        -:   41:    !             F for Francois Garrison
        -:   42:    !             B for biological
        -:   43:    !
        -:   44:    ! freq is the current frequency
        -:   45:    ! freq0 is the reference frequency for which the dB/meter was specified (used only for 'm')
        -:   46:
        -:   47:    ! Returns
        -:   48:    ! c     real      part of sound speed
        -:   49:    ! alpha imaginary part of sound speed
        -:   50:
        -:   51:    USE MathConstants
        -:   52:
        -:   53:    REAL     (KIND=8), INTENT( IN )  :: freq, freq0, alpha, c, z, beta, fT
        -:   54:    CHARACTER (LEN=2), INTENT( IN )  :: AttenUnit
        -:   55:    REAL     (KIND=8)                :: f2, omega, alphaT, Thorp, a, FG
        -:   56:    COMPLEX  (KIND=8)                :: CRCI
        -:   57:
       58:   58:    omega = 2.0 * pi * freq
        -:   59:
        -:   60:    !  Convert to Nepers/m 
       58:   61:    alphaT = 0.0
    #####:   62:    SELECT CASE ( AttenUnit( 1 : 1 ) )
        -:   63:    CASE ( 'N' )
    #####:   64:       alphaT = alpha
        -:   65:    CASE ( 'M' )   ! dB/m
    #####:   66:       alphaT = alpha / 8.6858896D0
        -:   67:    CASE ( 'm' )   ! dB/m with power law
    #####:   68:       alphaT = alpha / 8.6858896D0
    #####:   69:       IF ( freq < fT ) THEN   ! frequency raised to the power beta
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:   70:          alphaT = alphaT * ( freq / freq0 ) ** beta
        -:   71:       ELSE                    ! linear in frequency
    #####:   72:          alphaT = alphaT * ( freq / freq0 ) * ( fT / freq0 ) ** ( beta - 1 )
        -:   73:       END IF
        -:   74:    CASE ( 'F' )   ! dB/(m kHz)
       29:   75:       alphaT = alpha * freq / 8685.8896D0
        -:   76:    CASE ( 'W' )   ! dB/wavelength
      29*:   77:       IF ( c /= 0.0         ) alphaT = alpha * freq / ( 8.6858896D0 * c )
branch  0 taken 28 (fallthrough)
branch  1 taken 1
        -:   78:       !        The following lines give f^1.25 frequency dependence
        -:   79:       !        FAC = SQRT( SQRT( freq / 50.0 ) )
        -:   80:       !        IF ( c /= 0.0 ) alphaT = FAC * alpha * freq / ( 8.6858896D0 * c )
        -:   81:    CASE ( 'Q' )   ! Quality factor
    #####:   82:       IF ( c * alpha /= 0.0 ) alphaT = omega / ( 2.0 * c * alpha )
branch  0 never executed (fallthrough)
branch  1 never executed
        -:   83:    CASE ( 'L' )   ! loss parameter
      58*:   84:       IF ( c /= 0.0         ) alphaT = alpha * omega / c
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 29
branch  4 taken 29
branch  5 taken 0
branch  6 taken 0
branch  7 taken 0
branch  8 never executed (fallthrough)
branch  9 never executed
        -:   85:    END SELECT
        -:   86:
        -:   87:    ! added volume attenuation
    #####:   88:    SELECT CASE ( AttenUnit( 2 : 2 ) )
        -:   89:    CASE ( 'T' )
    #####:   90:       f2 = ( freq / 1000.0 ) ** 2
        -:   91:
        -:   92:       ! Original formula from Thorp 1967
        -:   93:       ! Thorp = 40.0 * f2 / ( 4100.0 + f2 ) + 0.1 * f2 / ( 1.0 + f2 )   ! dB/kyard
        -:   94:       ! Thorp = Thorp / 914.4D0                 ! dB / m
        -:   95:       ! Thorp = Thorp / 8.6858896D0             ! Nepers / m
        -:   96:
        -:   97:       ! Updated formula from JKPS Eq. 1.34
    #####:   98:       Thorp = 3.3d-3 + 0.11 * f2 / ( 1.0 + f2 ) + 44.0 * f2 / ( 4100.0 + f2 ) + 3d-4 * f2   ! dB/km
    #####:   99:       Thorp = Thorp / 8685.8896 ! Nepers / m
        -:  100:
    #####:  101:       alphaT = alphaT + Thorp
        -:  102:    CASE ( 'F' )   ! Francois-Garrison
    #####:  103:       FG     = Franc_Garr( freq / 1000 );   ! dB/km
    #####:  104:       FG     = FG / 8685.8896;                           ! Nepers / m
    #####:  105:       alphaT = alphaT + FG
        -:  106:    CASE ( 'B' )   ! biological attenuation per Orest Diachok
      58*:  107:       DO iBio = 1, NBioLayers
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 58
branch  4 never executed (fallthrough)
branch  5 never executed
    #####:  108:          IF ( z >= bio( iBio )%Z1 .AND. z <= bio( iBio )%Z2 ) THEN
branch  0 never executed (fallthrough)
branch  1 never executed
branch  2 never executed (fallthrough)
branch  3 never executed
    #####:  109:             a = bio( iBio )%a0 / ( ( 1.0 - bio( iBio )%f0 ** 2 / freq ** 2  ) ** 2 + 1.0 / bio( iBio )%Q ** 2 )   ! dB/km
    #####:  110:             a = a / 8685.8896   ! Nepers / m
    #####:  111:             alphaT = alphaT + a
        -:  112:          END IF
        -:  113:       END DO
        -:  114:    END SELECT
        -:  115:
        -:  116:    ! Convert Nepers/m to equivalent imaginary sound speed 
       58:  117:    alphaT = alphaT * c * c / omega
       58:  118:    CRCI   = CMPLX( c, alphaT, KIND=8 )
        -:  119:
       58:  120:    IF ( alphaT > c ) THEN
branch  0 taken 0 (fallthrough)
branch  1 taken 58
    #####:  121:       WRITE( PRTFile, * ) 'Complex sound speed: ', CRCI
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
    #####:  122:       WRITE( PRTFile, * ) 'Usually this means you have an attenuation that is way too high'
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  123:       CALL ERROUT( 'AttenMod : CRCI ', 'The complex sound speed has an imaginary part > real part' )
call    0 never executed
        -:  124:    END IF
        -:  125:
       58:  126:    RETURN
        -:  127:  END FUNCTION CRCI
        -:  128:
        -:  129:  ! **********************************************************************!
        -:  130:
        -:  131:!! Computes Francois-Garrison volume attenuation
function __attenmod_MOD_franc_garr called 0 returned 0% blocks executed 0%
    #####:  132:  FUNCTION Franc_Garr( f )
        -:  133:
        -:  134:    ! Francois Garrison formulas for attenuation
        -:  135:    ! Based on a Matlab version by D. Jackson APL-UW
        -:  136:
        -:  137:    ! mbp Feb. 2019
        -:  138:    ! Verified using F-G Table IV
        -:  139:
        -:  140:    ! alpha = attenuation   (dB/km)
        -:  141:    ! f     = frequency     (kHz)
        -:  142:    ! T     = temperature   (deg C)
        -:  143:    ! S     = salinity      (psu)
        -:  144:    ! pH    = 7 for neutral water
        -:  145:    ! z_bar = depth         (m)
        -:  146:
        -:  147:    !     Returns
        -:  148:    !        alpha = volume attenuation in dB/km
        -:  149:
        -:  150:    REAL (KIND=8) :: f, Franc_Garr
        -:  151:    REAL (KIND=8) :: c, A1, A2, A3, P1, P2, P3, f1, f2
        -:  152:    ! LP: Bug (at least technically): Single-precision and double-precision
        -:  153:    ! literals are all mixed together here, both including values which are
        -:  154:    ! not representable as floats, thus leading to different results.
        -:  155:    ! Practically, these are approximate, experimentally-derived constants, so
        -:  156:    ! errors at the 1e-7 scale are completely not meaningful.
        -:  157:
    #####:  158:    c = 1412 + 3.21 * T + 1.19 * Salinity + 0.0167 * z_bar
        -:  159:
        -:  160:    ! Boric acid contribution
    #####:  161:    A1 = 8.86 / c * 10 ** ( 0.78 * pH - 5 )
    #####:  162:    P1 = 1
    #####:  163:    f1 = 2.8 * sqrt( Salinity / 35 ) * 10 ** ( 4 - 1245 / ( T + 273 ) )
        -:  164:
        -:  165:    ! Magnesium sulfate contribution
    #####:  166:    A2 = 21.44 * Salinity / c * ( 1 + 0.025 * T )
    #####:  167:    P2 = 1 - 1.37D-4 * z_bar + 6.2D-9 * z_bar ** 2
    #####:  168:    f2 = 8.17 * 10 ** ( 8 - 1990 / ( T + 273 ) ) / ( 1 + 0.0018 * ( Salinity - 35 ) )
        -:  169:
        -:  170:    ! Viscosity
    #####:  171:    P3 = 1 - 3.83D-5 * z_bar + 4.9D-10 * z_bar ** 2
    #####:  172:    if ( T < 20 ) THEN
branch  0 never executed (fallthrough)
branch  1 never executed
    #####:  173:       A3 = 4.937D-4 - 2.59D-5 * T + 9.11D-7 * T ** 2 - 1.5D-8  * T ** 3
        -:  174:    else
    #####:  175:       A3 = 3.964D-4 -1.146D-5 * T + 1.45D-7 * T ** 2 - 6.5D-10 * T ** 3
        -:  176:    end if
        -:  177:
        -:  178:    Franc_Garr = A1 * P1 * ( f1 * f ** 2 ) / ( f1 ** 2 + f ** 2 ) + A2 * P2 * ( f2 * f ** 2 ) / ( f2 ** 2 + f ** 2 ) + &
    #####:  179:         A3 * P3 * f ** 2
        -:  180:
    #####:  181:  END FUNCTION Franc_Garr
        -:  182:
function __attenmod_MOD___copy_attenmod_Biostructure called 0 returned 0% blocks executed 0%
    #####:  183:END MODULE AttenMod
