        -:    0:Source:monotonicMod.f90
        -:    0:Graph:monotonicMod.gcno
        -:    0:Data:monotonicMod.gcda
        -:    0:Runs:2
        -:    1:!! Monotonicity testing utilities for input validation
        -:    2:MODULE monotonicMod
        -:    3:  !! Utilities for testing and enforcing monotonic ordering in input data vectors
        -:    4:
        -:    5:! tests whether an input vector is strictly monotonically increasing
        -:    6:!
        -:    7:! mbp February 2014
        -:    8:
        -:    9:  IMPLICIT NONE
        -:   10:  
        -:   11:  INTERFACE monotonic
        -:   12:     MODULE PROCEDURE monotonic_sngl, monotonic_dble
        -:   13:  END INTERFACE monotonic
        -:   14:
        -:   15:CONTAINS
        -:   16:!! Tests if single precision vector is monotonically increasing
function __monotonicmod_MOD_monotonic_sngl called 2 returned 100% blocks executed 100%
        2:   17:  FUNCTION monotonic_sngl( x, N )
        -:   18:    LOGICAL :: monotonic_sngl
        -:   19:    INTEGER,                       INTENT( IN ) :: N
        -:   20:    REAL (KIND=4), DIMENSION( N ), INTENT( IN ) :: x
        -:   21:
        2:   22:    monotonic_sngl = .TRUE.
        2:   23:    IF ( N == 1 ) RETURN
branch  0 taken 0 (fallthrough)
branch  1 taken 2
     2002:   24:    IF ( ANY( x( 2 : N ) <= x( 1 : N - 1 ) ) ) monotonic_sngl = .FALSE.   
branch  0 taken 2000 (fallthrough)
branch  1 taken 2
branch  2 taken 2000 (fallthrough)
branch  3 taken 0
branch  4 taken 2
branch  5 taken 0 (fallthrough)
        -:   25:
        -:   26:  END FUNCTION monotonic_sngl
        -:   27:
        -:   28:!! Tests if double precision vector is monotonically increasing
function __monotonicmod_MOD_monotonic_dble called 6 returned 100% blocks executed 100%
        6:   29:  FUNCTION monotonic_dble( x, N )
        -:   30:    LOGICAL :: monotonic_dble
        -:   31:    INTEGER,                       INTENT( IN ) :: N
        -:   32:    REAL (KIND=8), DIMENSION( N ), INTENT( IN ) :: x
        -:   33:
        6:   34:    monotonic_dble = .TRUE.
        6:   35:    IF ( N == 1 ) RETURN
branch  0 taken 0 (fallthrough)
branch  1 taken 6
       12:   36:    IF ( ANY( x( 2 : N ) <= x( 1 : N - 1 ) ) ) monotonic_dble = .FALSE.   
branch  0 taken 6 (fallthrough)
branch  1 taken 6
branch  2 taken 6 (fallthrough)
branch  3 taken 0
branch  4 taken 6
branch  5 taken 0 (fallthrough)
        -:   37:
        -:   38:  END FUNCTION monotonic_dble
        -:   39:END MODULE monotonicMod
